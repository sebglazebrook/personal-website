#!/usr/bin/env ruby

require "pathname"
PROJECT_DIR = Pathname.new(File.expand_path(File.join("..", ".."), __FILE__))

# TODO move to helper class/file
def log(message)
  puts "#{Time.now}: #{message}"
end

# TODO move to own file
require "uri"
module Models

  class BlogPost

    def initialize(header:, content:, created_at:)
      @header = header
      @content = content
      @created_at = created_at
    end

    def save
      Repositories::BlogPostRepository.save(self)
    end

    def valid?
      !invalid?
    end

    def invalid?
      instance_variables.any? { |variable| variable.nil? }
    end

    # TODO need a better name for name
    def name
      "#{created_at.to_i}-#{header.gsub(/\s+/, '_')}" # TODO this is a hack
    end

    # TODO need a better name for file_name
    def file_name
      "#{name}.json"
    end

    def content_snippet
      content[0..100]
    end

    def as_json
      {
        header: header,
        content: content,
        content_snippet: content_snippet,
        created_at: created_at,
        url:  "/posts/#{name}",
        data_url:  "data/posts/#{file_name}"
      }
    end

    private

    attr_reader :header, :content, :created_at
  end

  class BlogRoll

    attr_writer :blog_posts

    def save
      Repositories::BlogRollRepository.save(self)
    end

    def as_json
      posts = blog_posts.map do |blog_post|
        blog_post.as_json.select do |key, value|
          [:header, :url, :data_url, :content_snippet].include?(key)
        end
      end
      { posts: posts }
    end

    def to_json
      as_json.to_json
    end

    private

    attr_reader :blog_posts

  end
end

require "time"
module Builders
  class BlogPostBuilder

    class UnableToBuildBlogPost < StandardError; end

    attr_accessor :header, :content
    attr_writer :created_at

    def created_at
      @created_at ? Time.parse(@created_at) : Time.now
    end

    def build!
      blog_post = Models::BlogPost.new(header: header, content: content, created_at: created_at)
      blog_post.valid? ? blog_post : raise(UnableToBuildBlogPost.new) # TODO add exception details
    end

  end
end

# TODO move to own file
require "json"
module Factories
  class BlogPostFactory

    class UnparsableData < StandardError; end

    class << self

      def create(raw_data)
        json_data = parse_raw_data(raw_data)
        build_blog_post(json_data).save
      end

      def create_from_file(filepath)
        json_data = JSON.parse(File.read(filepath))
        build_blog_post(json_data)
      end

      private

      def parse_raw_data(raw_data)
        JSON.parse(raw_data)
      rescue StandardError => e
        message = "Unable to parse the input. Is it valid JSON?\nRaw exception:\n#{e.message}"
        raise UnparsableData.new(message)
      end

      def build_blog_post(json_data)
        builder = Builders::BlogPostBuilder.new
        builder.header = json_data["header"]
        builder.content = json_data["content"]
        builder.created_at = json_data["created_at"]
        builder.build!
      end

    end

  end
end

module Repositories

  class BlogRollRepository

    def self.rebuild
      blog_roll = Models::BlogRoll.new
      blog_posts = Repositories::BlogPostRepository.all
      blog_roll.blog_posts = blog_posts # TODO tell don't ask?
      blog_roll.save
    end

    def self.save(blog_roll)
      data_dir.join("index.js").write(blog_roll.to_json)
    end

    def self.data_dir
      PROJECT_DIR.join("dist", "data", "posts")
    end

  end

  class BlogPostRepository

    class << self

      def all
        data_dir.entries.map do |entry|
          if entry.to_s =~ /^\d{10}-/ # TODO remove the if?
            Factories::BlogPostFactory.create_from_file(data_dir.join(entry))
          end
        end.compact
      end

      def save(blog_post)
        data_dir.join(blog_post.file_name).write(JSON.pretty_generate(blog_post.as_json))
      end

      private


      def data_dir
        PROJECT_DIR.join("dist", "data", "posts")
      end

    end
  end
end


# TODO move to own file
module Commands
  class AddNewBlogPost

    def initialize(blog_post_data)
      @blog_post_data = blog_post_data
    end

    def call
      create_blog_post
      update_blog_roll
      update_index_html
    end

    private

    def create_blog_post
      Factories::BlogPostFactory.create(@blog_post_data)
    end

    def update_blog_roll
      Repositories::BlogRollRepository.rebuild
    end

    # TODO refactor this
    def update_index_html
      index_contents = PROJECT_DIR.join("dist", "index.html").read # get the contents of the index file
      blog_data_contents = PROJECT_DIR.join("dist", "data", "posts", "index.js").read # get the contents of the blog roll data
      load_data =
"""
<!-- Insert Data for initial load below here -->
<script>
  var rawData = '#{blog_data_contents}';
  window.blogData = JSON.parse(rawData)['posts'];
</script>
<!-- Insert Data for initial load above here -->
"""
      new_index_contents = index_contents.gsub(/<!-- Insert Data for initial load below here -->.*<!-- Insert Data for initial load above here -->?/m, load_data)
      PROJECT_DIR.join("dist", "index.html").write(new_index_contents)
    end

  end
end

log "Reading from stdin"
blog_post_data = STDIN.read
Commands::AddNewBlogPost.new(blog_post_data).call
